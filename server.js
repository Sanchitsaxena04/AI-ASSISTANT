const express = require('express')
const app = express()
const port = 3000
const path = require('path');
const OpenAI = require('openai')
const messages = [] 
const fs = require('fs');


const openai = new OpenAI({
  apiKey: "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" , // defaults to process.env["OPENAI_API_KEY"]
});

//this input is going to hold the content which we speak through microphone which is coming from the globaltranscript
/*(1)The main function is asynchronous, indicating that it may involve operations that could take some time,
such as making external API requests. It takes input as a parameter, which is the user's query or input
to the AI assistant.
 there's an array named messages that appears to be used to hold a conversation history between the user and the
 AI assistant.
(2)messages.push({ role: 'user', content: input })--> 
This line pushes a new message object into the messages array.
The object has two properties:

(a)role: It is set to 'user', indicating that this message represents the user's input.
(b)content: This property is assigned the value of the input parameter, which is the user's query or input.
This effectively records the user's query in the conversation history.

(3)It makes an asynchronous call to openai.chat.completions.create to create a chat-based completion using the
OpenAI API. The parameters for this API call are as follows:
(a)messages: It provides the messages array, which contains the conversation history.
This history includes both user and AI messages.
(b)model: 'gpt-3.5-turbo': It specifies the model to use for generating the response.
'gpt-3.5-turbo' is a specific language model offered by OpenAI for natural language understanding and generation. 
*/
async function main(input) {
  //we are using the above empty array --> messages
  messages.push(  { role: 'user', content: input })
  console.log(messages)
  
  const chatCompletion = await openai.chat.completions.create({
  
/*This messages array contains both user and AI messages, forming the context for the response generation*/
    messages:messages, //sending conversation history to openAI API
    model: 'gpt-3.5-turbo', //using specific model of openAI to catch a response
  });

  /*here question mark is describing if the choices and message is existing then move forward or stop.
     This will prevent the program from crashing.
     This is a safeguarded way of accessing the content of the first choice in the API response, ensuring that
     the program doesn't crash if there are no choices or messages present..*/

  //choices is an array so we are providing the index infront of choices
   return (chatCompletion.choices[0]?.message?.content)
}










app.use(express.json())
app.use(express.urlencoded({ extended: true}))

// Render Html File
app.get('/', function(req, res) {
  res.sendFile(path.join(__dirname, 'index.html'));
});



/* Defining a route to handle HTTP POST requests to the '/api' endpoint.
(1)console.log(req.body): This line logs the req.body object to the server's console. The req object represents
the HTTP request, and req.body is the body of the request. In this context, it's logging the content of the request
body, which typically contains data sent by the client.
(2)const mes = await main(req.body.input): This line invokes the main function with the data sent in the request
body as req.body.input. The main function is responsible for processing the user's input and generating a response

(3)res.json({ success: true, message: mes }): This line sends a JSON response back to the client. The response
includes two properties:

(a)success: true: This indicates that the request was successful.
(b)message: mes: The mes variable contains the response generated by the main function based on the user's input. 
This response is included in the JSON response and will be sent back to the client.*/

app.post('/api', async function( req ,res, next) {

  console.log(req.body)
  const mes = await main(req.body.input)
  res.json({success: true, message:mes})
  
})

app.listen(port, () => {
 console.log(`SERVER STARTED AT PORT: ${port}`)
})

/*The flow of the input which is recorded with the help of a microphone is-->

Firstly the speech is transcribed and stored in the globalTranscript(index.html)-->
globalTranscript is sent to as input parameter defined in the populateUsingGPT function-->
the (globaltranscript now serving as input in the populateusingGPT) input is transfered to the app.post
asynchronous function(present in the server.js) and stored inside the req object-->
now the main function is called using this req object containing the input from the user and it is sent to the
input which we have defined inside the main function as a parameter
*/
